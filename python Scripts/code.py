#!/usr/bin/env python
# coding: utf-8

# Youtube Channel Data Fetch Through Google Cloud API For Real Data

# In[56]:


import numpy as np 
import pandas as pd
import matplotlib as plt
import seaborn as sns 
import isodate


# In[57]:


pip install isodate


# Use python Script for Fetching Raw Data Of youtube Channel by YouTube Data API v3

# In[58]:


pip install google-api-python-client


# In[59]:


import pandas as pd
from googleapiclient.discovery import build

API_KEY = "AIzaSyBA8gnhKqlszwZYvvTVV8b0H4f05UqBEdA" 
CHANNEL_ID = "UCX6OQ3DkcsbYNE6H8uQQuVA"

youtube = build('youtube', 'v3', developerKey=API_KEY)


def fetch_channel_videos(channel_id):
    videos = []
    next_page_token = None

    while True:
        response = youtube.search().list(
            part="id,snippet",
            channelId=channel_id,
            maxResults=50,
            order="date",
            pageToken=next_page_token
        ).execute()

        for item in response['items']:
            if item['id']['kind'] == 'youtube#video':
                videos.append({
                    "Video_ID": item['id']['videoId'],
                    "Title": item['snippet']['title'],
                    "Published_At": item['snippet']['publishedAt']
                })

        next_page_token = response.get('nextPageToken')
        if not next_page_token:
            break

    return videos

def fetch_video_stats(video_ids):
    stats_list = []

    for i in range(0, len(video_ids), 50):
        response = youtube.videos().list(
            part="statistics,contentDetails",
            id=",".join(video_ids[i:i+50])
        ).execute()

        for video in response['items']:
            stats_list.append({
                "Video_ID": video['id'],
                "Views": int(video['statistics'].get('viewCount', 0)),
                "Likes": int(video['statistics'].get('likeCount', 0)),
                "Comments": int(video['statistics'].get('commentCount', 0)),
                "Duration": video['contentDetails']['duration']  # ISO 8601 format
            })

    return stats_list

videos = fetch_channel_videos(CHANNEL_ID)
video_ids = [v['Video_ID'] for v in videos]
stats = fetch_video_stats(video_ids)


df_videos = pd.DataFrame(videos)
df_stats = pd.DataFrame(stats)
dataset = pd.merge(df_videos, df_stats, on="Video_ID")

# Save to csv
dataset.to_csv("YouTube_Channel_Data.csv", index=False)
print("Dataset saved as YouTube_Channel_Data.csv")


# Read Dataset 

# In[60]:


data=pd.read_csv("YouTube_Channel_Data.csv")


# In[61]:


data.head()


# In[62]:


data.tail()


# In[38]:


data.describe()


# In[63]:


data.info()


# Converted ISO 8601 TimeStamp into Date Format 

# In[64]:


data['Published_Date'] = pd.to_datetime(data['Published_At']).dt.date


# In[65]:


data.head()


# In[66]:


# Drop the Published_At Column Because we have converted it into Date format
data.drop(columns=['Published_At'],inplace=True)


# In[67]:


data.head()


# Now Convert Duration which in format of ISO 8601 Format

# In[68]:


def duration_in_minutes(duration):
    td = isodate.parse_duration(duration)
    return td.total_seconds() / 60

data['Duration_In_Minutes'] = data['Duration'].apply(duration_in_minutes)



# Drop Duration because it is converted From ISO Duration into Duration in minutes

# In[69]:


data.drop(columns=['Duration'],inplace=True)


# In[70]:


data.head()


# Revenue Generated By Each Single Videos So That We can Increase Revenue In Next Videos Usually, revenue is estimated based on CPM (cost per 1,000 views).
# 

# In[72]:


cpm_Low = 0.25
cpm_avg = 1.5
cpm_high = 4.0

data['Revenue_Low'] = (data['Views'] / 1000)*cpm_Low
data['Revenue_Avg'] = (data['Views'] / 1000)*cpm_avg
data['Revenue_High'] = (data['Views'] / 1000)*cpm_high

data[['Revenue_Low','Revenue_Avg','Revenue_High']] = data[['Revenue_Low','Revenue_Avg','Revenue_High']].round(2)


# In[73]:


data.head()


# Now We can Calculate Engagment Score by :- Like + Comments / Views x 100

# In[74]:


data['Engagment_Score'] = ((data['Likes'] + data['Comments']) / data['Views']) * 100
data['Engagment_Score'] = data['Engagment_Score'].round(2)


# In[75]:


data.head()


# In[ ]:




